import numpy as np

# 1. Define the energy cost function (slightly changed coefficients)
def energy_cost(x):
    a = 0.6
    b = 2.5
    c = 8
    return a * x**2 + b * x + c

# 2. PSO parameters (modified)
num_particles = 4
max_iter = 3
bounds = (1, 12)  # Power usage limits in kW (slightly expanded)

w = 0.6     # Inertia weight (slightly increased)
c1 = 1.7    # Cognitive (particle) coefficient
c2 = 1.3    # Social (swarm) coefficient

# 3. Initialize particles
positions = np.random.uniform(bounds[0], bounds[1], num_particles)
velocities = np.zeros(num_particles)

pbest_positions = positions.copy()
pbest_values = np.array([energy_cost(x) for x in positions])

gbest_index = np.argmin(pbest_values)
gbest_position = pbest_positions[gbest_index]
gbest_value = pbest_values[gbest_index]

# 4. PSO Loop
for iteration in range(max_iter):
    print(f"\n--- Iteration {iteration + 1} ---")
   
    for i in range(num_particles):
        # Update velocity
        r1, r2 = np.random.rand(), np.random.rand()
        cognitive = c1 * r1 * (pbest_positions[i] - positions[i])
        social = c2 * r2 * (gbest_position - positions[i])
        velocities[i] = w * velocities[i] + cognitive + social

        # Update position
        positions[i] += velocities[i]
        positions[i] = np.clip(positions[i], bounds[0], bounds[1])  # Keep in bounds

        # Evaluate
        cost = energy_cost(positions[i])

        # Update personal best
        if cost < pbest_values[i]:
            pbest_positions[i] = positions[i]
            pbest_values[i] = cost

    # Update global best
    min_pbest_index = np.argmin(pbest_values)
    if pbest_values[min_pbest_index] < gbest_value:
        gbest_position = pbest_positions[min_pbest_index]
        gbest_value = pbest_values[min_pbest_index]

    # Print pbest and gbest
    print("Particle Bests (pbest):")
    for i in range(num_particles):
        print(f"Particle {i+1}: x = {pbest_positions[i]:.4f}, cost = {pbest_values[i]:.4f}")
    print(f"Global Best (gbest): x = {gbest_position:.4f}, cost = {gbest_value:.4f}")

# Final result
print("\n=== Optimization Complete ===")
print(f"Optimal Power Usage: {gbest_position:.4f} kW")
print(f"Minimum Energy Cost: ${gbest_value:.4f}")
